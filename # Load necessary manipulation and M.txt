# Load necessary manipulation and ML libraries for the project
library(dplyr)
library(caret)

# Read the dataset in the specific path
data <- read.csv("C:/Users/nidha/Downloads/lab1 ML/oulad-students.csv")

# Data preprocessing veriables are converted into factors
# Convert categorical variables to factors
factor_columns <- c("code_module", "code_presentation", "gender", "region", 
                    "highest_education", "imd_band", "age_band", "num_of_prev_attempts", 
                    "disability", "final_result")

data[factor_columns] <- lapply(data[factor_columns], as.factor)

# Drop rows with missing values in the data
data <- na.omit(data)

# Split the data into training and testing sets (80% training, 20% testing)
set.seed(123) # For reproducibility
train_index <- createDataPartition(data$final_result, p = 0.8, list = FALSE)

# Train and test datasets
train_data <- data[train_index, ]
test_data <- data[-train_index, ]

# Train the classification model (logistic regression gm veriable)
model <- glm(final_result ~ ., data = train_data, family = "binomial")

# Make predictions on the test data (probabilities)
predictions <- predict(model, newdata = test_data, type = "response")

# Convert predicted probabilities to class labels on a threshold of 0.5
predicted_classes <- ifelse(predictions > 0.5, "Pass", "Fail")  # Adjust the threshold as needed

# Convert predicted_classes to factor with the same levels as test_data$final_result
predicted_classes <- factor(predicted_classes, levels = levels(test_data$final_result))

# Evaluate the model The confusionMatrix function from the caret package is used to compute the confusion matrix and various performance metrics for the classification model
confusionMatrix(data = predicted_classes, reference = test_data$final_result)





